version: '3.8'

# Production Docker Compose Configuration
# Usage: docker-compose -f docker-compose.prod.yml up -d

services:
  # Main Screenshot Manager Application
  screenshot-manager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: screenshot-manager-prod
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
      - ./config:/app/config
      - screenshot_cache:/app/cache
    environment:
      - ENV=production
      - LOG_LEVEL=INFO
      - DISPLAY=:99
      - PYTHONPATH=/app
    networks:
      - screenshot-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.screenshot-manager.rule=Host(`screenshot.yourdomain.com`)"
      - "traefik.http.services.screenshot-manager.loadbalancer.server.port=8080"

  # MCP Server for Claude Code Integration
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: screenshot-mcp-prod
    restart: unless-stopped
    command: ["mcp-server"]
    ports:
      - "8081:8081"
    volumes:
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
      - ./config:/app/config
    environment:
      - ENV=production
      - LOG_LEVEL=INFO
    networks:
      - screenshot-network
    depends_on:
      screenshot-manager:
        condition: service_healthy

  # WebApp Monitor Service
  webapp-monitor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: screenshot-monitor-prod
    restart: unless-stopped
    command: ["screenshot-monitor"]
    volumes:
      - ./logs:/app/logs
      - ./screenshots:/app/screenshots
      - ./config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ENV=production
      - LOG_LEVEL=INFO
      - DISPLAY=:99
    networks:
      - screenshot-network
    depends_on:
      screenshot-manager:
        condition: service_healthy

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: screenshot-redis-prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - screenshot-network
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 256mb 
      --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: screenshot-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - screenshot-network

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: screenshot-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://monitoring.yourdomain.com
      - GF_ANALYTICS_REPORTING_ENABLED=false
    networks:
      - screenshot-network
    depends_on:
      - prometheus

  # Log Aggregation
  fluentbit:
    image: fluent/fluent-bit:latest
    container_name: screenshot-logs-prod
    restart: unless-stopped
    volumes:
      - ./logs:/fluent-bit/logs:ro
      - ./monitoring/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    ports:
      - "2020:2020"
    networks:
      - screenshot-network
    depends_on:
      - screenshot-manager

  # Reverse Proxy (Traefik)
  traefik:
    image: traefik:v2.10
    container_name: screenshot-traefik-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8888:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik:ro
      - traefik_certs:/certs
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=false
    networks:
      - screenshot-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.yourdomain.com`)"

networks:
  screenshot-network:
    driver: bridge
    name: screenshot-prod-network

volumes:
  redis_data:
    name: screenshot-redis-prod-data
  prometheus_data:
    name: screenshot-prometheus-prod-data
  grafana_data:
    name: screenshot-grafana-prod-data
  screenshot_cache:
    name: screenshot-cache-prod-data
  traefik_certs:
    name: screenshot-traefik-certs