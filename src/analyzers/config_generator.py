#!/usr/bin/env python3
"""
プロジェクト設定ファイル自動生成機能
検出されたプロジェクト情報を基に、最適な監視設定ファイルを生成
"""

import json
import yaml
import logging
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime

from ..detectors.project_detector import ProjectInfo, ProjectDetector

class ConfigGenerator:
    """プロジェクト設定ファイルの自動生成"""
    
    def __init__(self, logger=None):
        self.logger = logger or logging.getLogger(__name__)
        self.templates_path = Path(__file__).parent.parent.parent / "config" / "templates" / "project_templates.json"
        self.templates = self._load_templates()
    
    def _load_templates(self) -> Dict[str, Any]:
        """テンプレートファイルを読み込む"""
        try:
            with open(self.templates_path, 'r', encoding='utf-8') as f:
                templates = json.load(f)
            self.logger.info(f"✅ テンプレートを読み込みました: {len(templates)}種類")
            return templates
        except Exception as e:
            self.logger.error(f"❌ テンプレート読み込みエラー: {e}")
            return {}
    
    def generate_config(self, project_info: ProjectInfo, custom_settings: Dict = None) -> Dict[str, Any]:
        """プロジェクト情報を基に設定を生成"""
        
        # テンプレートを取得
        template = self.templates.get(project_info.framework)
        if not template:
            self.logger.warning(f"⚠️ {project_info.framework}のテンプレートが見つかりません。デフォルトテンプレートを使用します。")
            template = self._get_default_template()
        
        # ベース設定を作成
        config = {
            "# Generated by Screenshot Manager": f"Auto-generated on {datetime.now().isoformat()}",
            "project": {
                "name": project_info.name,
                "framework": project_info.framework,
                "language": project_info.language,
                "path": str(project_info.path),
                "dev_command": project_info.dev_command or template["project"]["dev_command"],
                "build_command": project_info.build_command or template["project"]["build_command"],
                "port": project_info.default_port or template["project"]["port"],
                "package_manager": project_info.package_manager,
                "confidence": project_info.confidence
            }
        }
        
        # テンプレート設定をマージ
        for section in ["monitoring", "testing", "capture"]:
            if section in template:
                config[section] = template[section].copy()
        
        # プロジェクト固有の調整
        config = self._customize_config(config, project_info)
        
        # カスタム設定をマージ
        if custom_settings:
            config = self._merge_configs(config, custom_settings)
        
        self.logger.info(f"✅ {project_info.framework}プロジェクトの設定を生成しました")
        return config
    
    def _get_default_template(self) -> Dict[str, Any]:
        """デフォルトテンプレートを返す"""
        return {
            "project": {
                "framework": "Generic",
                "dev_command": "npm start",
                "build_command": "npm run build",
                "port": 3000
            },
            "monitoring": {
                "watch_files": ["src/**/*", "public/**/*"],
                "ignore_patterns": ["node_modules/**", ".git/**"],
                "capture_triggers": ["startup", "code_change"],
                "debounce_ms": 2000
            },
            "testing": {
                "browsers": ["chrome"],
                "viewports": {
                    "desktop": [1920, 1080],
                    "tablet": [768, 1024],
                    "mobile": [375, 667]
                },
                "pages_to_test": [{"path": "/", "name": "Home"}]
            },
            "capture": {
                "wait_before_capture": 2000,
                "full_page": True,
                "error_selectors": [".error", ".alert-danger"]
            }
        }
    
    def _customize_config(self, config: Dict[str, Any], project_info: ProjectInfo) -> Dict[str, Any]:
        """プロジェクト固有の設定調整"""
        
        # ポート設定の調整
        if project_info.default_port:
            config["project"]["port"] = project_info.default_port
        
        # パッケージマネージャーに応じたコマンド調整
        if project_info.package_manager == "yarn":
            config["project"]["dev_command"] = config["project"]["dev_command"].replace("npm run", "yarn")
            config["project"]["build_command"] = config["project"]["build_command"].replace("npm run", "yarn")
        elif project_info.package_manager == "pnpm":
            config["project"]["dev_command"] = config["project"]["dev_command"].replace("npm run", "pnpm")
            config["project"]["build_command"] = config["project"]["build_command"].replace("npm run", "pnpm")
        
        # フレームワーク固有の調整
        if project_info.framework == "Django":
            # Djangoプロジェクトの場合、manage.pyの存在確認
            if (project_info.path / "manage.py").exists():
                config["project"]["dev_command"] = "python manage.py runserver"
        
        elif project_info.framework == "Flask":
            # Flaskプロジェクトの場合、app.pyの存在確認
            if (project_info.path / "app.py").exists():
                config["project"]["dev_command"] = "python app.py"
            elif (project_info.path / "main.py").exists():
                config["project"]["dev_command"] = "python main.py"
        
        # TypeScriptプロジェクトの場合
        if (project_info.path / "tsconfig.json").exists():
            config["project"]["language"] = "TypeScript"
            if "monitoring" in config:
                # TypeScriptファイルを監視対象に追加
                watch_files = config["monitoring"].get("watch_files", [])
                ts_patterns = [pattern.replace(".js", ".ts").replace(".jsx", ".tsx") for pattern in watch_files]
                config["monitoring"]["watch_files"] = list(set(watch_files + ts_patterns))
        
        return config
    
    def _merge_configs(self, base_config: Dict[str, Any], custom_config: Dict[str, Any]) -> Dict[str, Any]:
        """設定をマージ"""
        def deep_merge(dict1, dict2):
            result = dict1.copy()
            for key, value in dict2.items():
                if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                    result[key] = deep_merge(result[key], value)
                else:
                    result[key] = value
            return result
        
        return deep_merge(base_config, custom_config)
    
    def save_config(self, config: Dict[str, Any], project_path: Path, format: str = "yaml") -> Path:
        """設定ファイルを保存"""
        
        if format.lower() == "yaml":
            config_file = project_path / ".screenshot-manager.yaml"
            try:
                with open(config_file, 'w', encoding='utf-8') as f:
                    yaml.dump(config, f, default_flow_style=False, allow_unicode=True, sort_keys=False)
                self.logger.info(f"✅ 設定ファイルを保存しました: {config_file}")
                return config_file
            except Exception as e:
                self.logger.error(f"❌ YAML設定ファイル保存エラー: {e}")
                raise
        
        else:  # JSON
            config_file = project_path / ".screenshot-manager.json"
            try:
                with open(config_file, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=2, ensure_ascii=False)
                self.logger.info(f"✅ 設定ファイルを保存しました: {config_file}")
                return config_file
            except Exception as e:
                self.logger.error(f"❌ JSON設定ファイル保存エラー: {e}")
                raise
    
    def generate_and_save(self, project_path: Path, custom_settings: Dict = None, format: str = "yaml") -> Optional[Path]:
        """プロジェクトを検出して設定ファイルを生成・保存"""
        
        # プロジェクト検出
        detector = ProjectDetector(logger=self.logger)
        project_info = detector.detect_project(project_path)
        
        if not project_info:
            self.logger.error(f"❌ プロジェクトが検出されませんでした: {project_path}")
            return None
        
        # 設定生成
        config = self.generate_config(project_info, custom_settings)
        
        # 保存
        try:
            config_file = self.save_config(config, project_path, format)
            return config_file
        except Exception as e:
            self.logger.error(f"❌ 設定ファイル生成失敗: {e}")
            return None
    
    def update_existing_config(self, project_path: Path, updates: Dict[str, Any]) -> bool:
        """既存の設定ファイルを更新"""
        
        config_files = [
            project_path / ".screenshot-manager.yaml",
            project_path / ".screenshot-manager.json"
        ]
        
        # 既存の設定ファイルを探す
        existing_config = None
        config_file = None
        file_format = "yaml"
        
        for cf in config_files:
            if cf.exists():
                config_file = cf
                file_format = "yaml" if cf.suffix == ".yaml" else "json"
                break
        
        if not config_file:
            self.logger.warning("既存の設定ファイルが見つかりません。新規作成します。")
            return self.generate_and_save(project_path) is not None
        
        # 既存設定を読み込み
        try:
            if file_format == "yaml":
                with open(config_file, 'r', encoding='utf-8') as f:
                    existing_config = yaml.safe_load(f)
            else:
                with open(config_file, 'r', encoding='utf-8') as f:
                    existing_config = json.load(f)
        except Exception as e:
            self.logger.error(f"❌ 既存設定ファイル読み込みエラー: {e}")
            return False
        
        # 設定をマージ
        updated_config = self._merge_configs(existing_config, updates)
        
        # 保存
        try:
            self.save_config(updated_config, project_path, file_format)
            return True
        except Exception as e:
            self.logger.error(f"❌ 設定ファイル更新エラー: {e}")
            return False

def main():
    """テスト実行"""
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    generator = ConfigGenerator()
    
    # テスト用Reactプロジェクトで設定生成
    test_project_path = Path.cwd() / "test_react_project"
    
    if test_project_path.exists():
        print("🔧 設定ファイル生成テストを開始...")
        
        config_file = generator.generate_and_save(test_project_path)
        
        if config_file:
            print(f"✅ 設定ファイル生成成功: {config_file}")
            
            # 生成された設定の内容を表示
            with open(config_file, 'r', encoding='utf-8') as f:
                content = f.read()
            print("\n📄 生成された設定内容:")
            print(content)
        else:
            print("❌ 設定ファイル生成失敗")
    else:
        print("❌ テスト用プロジェクトが見つかりません")

if __name__ == "__main__":
    main()